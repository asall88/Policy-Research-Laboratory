setwd("~/Dropbox/SalemCenter/classes/PRL/Policy-Research-Laboratory/code")
resume <- read.csv("../data/resume.csv")
dim(resume)
head(resume)
summary(resume)
2008:2012
## ------------------------------------------------------------------------
# Let's consider an experiment where researchers have a set of resumes, and the change the names at the top to white and black sounding names.
resume <- read.csv("../data/resume.csv")
dim(resume)
head(resume)
race.call.tab <- table(race = resume$race, call = resume$call)
race.call.tab
## overall callback rate: total callbacks divided by the sample size
sum(race.call.tab[, 2]) / nrow(resume)
## callback rates for each race
race.call.tab[1, 2] / sum(race.call.tab[1, ]) # black
race.call.tab[2, 2] / sum(race.call.tab[2, ]) # white
race.call.tab[1, ]  # the first row
race.call.tab[, 2]  # the second column
mean(resume$call)
## overall callback rate: total callbacks divided by the sample size
sum(race.call.tab[, 2]) / nrow(resume)
## ------------------------------------------------------------------------
class(TRUE)
as.integer(TRUE)
as.integer(FALSE)
## ------------------------------------------------------------------------
## callback rate for black-sounding names
mean(resume$call[resume$race == "black"])
## race of first 5 observations
resume$race[1:5]
resumeB <- resume[resume$race == "black", ]
dim(resumeB) # this data.frame has fewer rows than the original data.frame
mean(resumeB$call) # callback rate for blacks
## subset whites only
resumeW <- resume[resume$race == "white", ]
dim(resumeW) # this data.frame has fewer rows than the original data.frame
mean(resumeW$call) # callback rate for blacks
head(resumeW)
setwd("~/Dropbox/SalemCenter/classes/PRL/Policy-Research-Laboratory/code")
david <- "instructor"
david
david
david <- "instructor and author"
david
Result <- "5"
Result
result
class(result)
Result
class(Result)
class(sqrt)
sqrt(4)
sqrt(4032892134)
typeof(sqrt)
typeof(Result)
world.pop <- c(2525779, 3026003, 3691173, 4449049, 5320817, 6127700, 6916183)
world.pop
pop.first <- c(2525779, 3026003, 3691173)
pop.second <- c(4449049, 5320817, 6127700, 6916183)
pop.all <- c(pop.first, pop.second)
pop.all
world.pop
test = c(1,2,4,5,6,)
test = c(1,2,4,5,6)
test
world.pop[2]
world.pop[c(2, 4)]
world.pop[c(4, 2)]
world.pop[-3]
world.pop
pop.million <- world.pop / 1000
pop.million
pop.million
pop.rate <- world.pop / world.pop[1]
pop.rate
pop.increase <- world.pop[-1] - world.pop[-7]
pop.increase
world.pop[-7]
world.pop
world.pop[-7]
world.pop[-1]
percent.increase <- (pop.increase / world.pop[-7]) * 100
percent.increase
percent.increase[c(1, 2)] <- c(20, 22)
percent.increase
## ------------------------------------------------------------------------
# There are many way to extract summary statistics from a given vector
length(world.pop)
min(world.pop)
max(world.pop)
range(world.pop)
mean(world.pop)
sum(world.pop) / length(world.pop)
year <- seq(from = 1950, to = 2010, by = 10)
year
seq(to = 2010, by = 10, from = 1950)
seq(from = 2010, to = 1950, by = -10)
2008:2012
2012:2008
names(world.pop)
names(world.pop) <- year
names(world.pop)
world.pop
z <- 1:10
my.summary(z)
my.summary <- function(x){ # function takes one input
s.out <- sum(x)
l.out <- length(x)
m.out <- s.out / l.out
out <- c(s.out, l.out, m.out) # define the output
names(out) <- c("sum", "length", "mean") # add labels
return(out) # end function by calling output
}
z <- 1:10
z
my.summary(z)
my.summary(world.pop)
